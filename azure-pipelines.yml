trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.csproj'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  artifactName: 'dotnet9app'

stages:

# ========================
# Stage 1: Build & Publish
# ========================
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildJob
    steps:

    # ⬇ Install .NET SDK 9.0.300
    - task: UseDotNet@2
      inputs:
        version: '9.0.300'
        includePreviewVersions: true
        packageType: 'sdk'

    # ⬇ Restore dependencies
    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        projects: '$(solution)'

    # ⬇ Build the project
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration)'

    # ⬇ Publish the app to a folder
    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: false

    # ⬇ Publish artifacts (to deploy later)
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: '$(artifactName)'

# ====================
# Stage 2: Deployment
# ====================
- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: DeployJob
    steps:

    # ✅ Download the artifact from the latest build
    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(artifactName)'
        targetPath: '$(Build.ArtifactStagingDirectory)\deploy'

    # ✅ Ensure IIS is installed on the remote machine
    - task: SSH@0
      displayName: 'Ensure IIS is installed'
      inputs:
        sshEndpoint: 'my-ssh-vm'
        runOptions: 'inline'
        inline: |
          powershell -Command "
            $iis = Get-WindowsFeature -Name Web-Server;
            if (-not $iis.Installed) {
              Write-Host 'IIS not installed. Installing now...'
              Install-WindowsFeature -Name Web-Server -IncludeManagementTools
            } else {
              Write-Host 'IIS is already installed.'
            }
          "

    # ✅ Ensure .NET 9 SDK or Hosting Bundle is installed
    - task: SSH@0
      displayName: 'Ensure .NET 9 SDK or Hosting Bundle is installed'
      inputs:
        sshEndpoint: 'my-ssh-vm'
        runOptions: 'inline'
        inline: |
          powershell -Command "
            $dotnetSdkVersion = '9.0.300';
            $sdkInstalled = Get-Command dotnet -ErrorAction SilentlyContinue;
            $isSdkInstalled = $false;
            if ($sdkInstalled) {
              $dotnetVersion = & dotnet --version;
              if ($dotnetVersion -eq $dotnetSdkVersion) {
                $isSdkInstalled = $true;
                Write-Host '.NET SDK 9.0.300 is already installed.'
              }
            }

            if (-not $isSdkInstalled) {
              Write-Host 'Installing .NET SDK 9.0.300...'
              Invoke-WebRequest -Uri https://download.visualstudio.microsoft.com/download/pr/56f6e6bc-f54a-4d0f-b736-1be9c732c2c4/96d57393e2e8b93f317fb9d4de5ae041/dotnet-sdk-9.0.300-win-x64.exe -OutFile 'C:\dotnet-sdk-9.0.300-win-x64.exe'
              Start-Process -FilePath 'C:\dotnet-sdk-9.0.300-win-x64.exe' -ArgumentList '/quiet', '/install' -NoNewWindow -Wait
              Write-Host '.NET SDK 9.0.300 installation complete.'
            } else {
              Write-Host '.NET SDK 9.0.300 is already installed.'
            }
          "

    # ✅ SSH deploy via file copy
    - task: CopyFilesOverSSH@0
      inputs:
        sshEndpoint: 'my-ssh-vm'
        sourceFolder: '$(Build.ArtifactStagingDirectory)\deploy'
        contents: '**'
        targetFolder: '/c/inetpub/wwwroot'

    # ✅ Restart IIS to apply changes
    - task: SSH@0
      inputs:
        sshEndpoint: 'my-ssh-vm'
        runOptions: 'inline'
        inline: |
          net stop w3svc
          net start w3svc
